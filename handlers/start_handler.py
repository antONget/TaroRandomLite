from aiogram import Router, Bot, F
from aiogram.filters import CommandStart, CommandObject
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from config_data.config import Config, load_config
from database import requests as rq
from database.models import User, Card
from utils.error_handling import error_handler
from filter.admin_filter import check_super_admin

import logging
import random

router = Router()
config: Config = load_config()
router.message.filter(F.chat.type == "private")


@router.message(CommandStart())
@error_handler
async def process_start_command_user(message: Message, state: FSMContext, command: CommandObject, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏–ª–∏ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã /start
    :param message:
    :param state:
    :param command:
    :param bot:
    :return:
    """
    logging.info(f'process_start_command_user: {message.chat.id}')
    await state.set_state(state=None)
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –µ—Å–ª–∏ –µ—â–µ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    user: User = await rq.get_user_by_id(tg_id=message.from_user.id)
    if not user:
        if message.from_user.username:
            username = message.from_user.username
        else:
            username = "user_name"
        data_user = {"tg_id": message.from_user.id,
                     "name": username}
        if await check_super_admin(telegram_id=message.from_user.id):
            data_user = {"tg_id": message.from_user.id,
                         "name": username,
                         "role": rq.UserRole.admin}
        await rq.add_user(data=data_user)
    user: User = await rq.get_user_by_id(tg_id=message.from_user.id)
    if user.active:
        await message.answer(text='–ü—Ä–∏–≤–µ—Ç! –Ø - —è—Å–Ω–æ–≤–∏–¥—è—â–∏–π –∏ –º–æ–≥—É –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –±—É–¥—É—â–µ–µü™¨\n\n'
                                  '–ú–æ–≥—É –ø–æ–≥–∞–¥–∞—Ç—å –≤ –ª–∏—á–∫–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /–∫–∞—Ä—Ç–∞–¥–Ω—è, –Ω–æ –ª—É—á—à–µ –≤—Å–µ–≥–æ –º–µ–Ω—è –¥–æ–±–∞–≤–∏—Ç—å'
                                  ' –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —Å —Ç–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏ –∏ —Ç–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /–∫–∞—Ä—Ç–∞–¥–Ω—è'
                                  ' - —Ç–æ–≥–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –∏ —Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω—ãüíÖüèª')
    else:
        await message.answer(text='–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ.')


@router.message(F.text == '–í–µ–¥—å–º–∏–Ω—Å–∫–∞—è –≥—É—â–∞')
@error_handler
async def cod_word(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏–ª–∏ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã /start
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'cod_word: {message.chat.id}')
    await rq.set_user_active(tg_id=message.from_user.id)
    await message.answer(text='–ü—Ä–∏–≤–µ—Ç! –Ø - —è—Å–Ω–æ–≤–∏–¥—è—â–∏–π –∏ –º–æ–≥—É –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –±—É–¥—É—â–µ–µü™¨\n\n'
                              '–ú–æ–≥—É –ø–æ–≥–∞–¥–∞—Ç—å –≤ –ª–∏—á–∫–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /–∫–∞—Ä—Ç–∞–¥–Ω—è, –Ω–æ –ª—É—á—à–µ –≤—Å–µ–≥–æ –º–µ–Ω—è –¥–æ–±–∞–≤–∏—Ç—å'
                              ' –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —Å —Ç–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏ –∏ —Ç–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /–∫–∞—Ä—Ç–∞–¥–Ω—è'
                              ' - —Ç–æ–≥–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –∏ —Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω—ãüíÖüèª')


@router.message(F.text == '/–∫–∞—Ä—Ç–∞–¥–Ω—è')
@error_handler
async def process_load_card(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'process_load_card: {message.chat.id}')
    user: User = await rq.get_user_by_id(tg_id=message.from_user.id)
    if user.active:
        list_cards = await rq.get_cards()
        if list_cards:
            random_card: Card = random.choice(list_cards)
            await message.answer_photo(photo=random_card.photo_id,
                                       caption=random_card.description)
            await message.delete()
    else:
        await message.answer(text='–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ.')
